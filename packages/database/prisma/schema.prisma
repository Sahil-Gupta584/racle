generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeploymentStatus {
  Ready
  Error
  Building
  Queued
  Canceled
}

// model EnvironmentVariables {
//   id        String   @id @default(uuid())
//   key       String
//   value     String
//   Project   Projects @relation(fields: [projectId], references: [id])
//   projectId String
// }

model Projects {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  name          String
  domainName    String
  repositoryUrl String
  installCmd    String
  buildCmd      String
  runCmd        String
  hookId        Int?
  autoDeploy    Boolean
  envs          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deployments   Deployments[]
}

model Deployments {
  id            String           @id @default(uuid())
  status        DeploymentStatus @default(Queued)
  commitHash    String
  commitMessage String
  logs          String?
  project       Projects         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  projectId     String
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  projects Projects[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
